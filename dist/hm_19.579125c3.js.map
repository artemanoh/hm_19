{"mappings":"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","sources":["src/index.js"],"sourcesContent":["// Функція для отримання всіх студентів\r\nconst studentsTableBody = document.querySelector(\"#students-table tbody\");\r\nconst getStudentsButton = document.getElementById(\"get-students-btn\");\r\nconst studentForm = document.getElementById(\"add-student-form\");\r\n\r\nasync function getStudents() {\r\n    // твій код\r\n  try {\r\n    const gettingFetch = await fetch(\"http://localhost:3000/students\");\r\n    const students = await gettingFetch.json();\r\n    renderStudents(students);\r\n  } catch (error) {\r\n    console.log(\"Помилка при завантаженні студентів\", error);\r\n  }\r\n}\r\n\r\n\r\n// Функція для відображення студентів у таблиці\r\n\r\nfunction renderStudents(students) {\r\n    // твій код\r\n    studentsTableBody.innerHTML = makeStudentsMarkup(students);\r\n}\r\n\r\n\r\nconst makeStudentsMarkup = (students) => {\r\n    return students.map((student) => {\r\n        return `\r\n      <tr>\r\n        <td>${student.id}</td>\r\n        <td>${student.name}</td>\r\n        <td>${student.age}</td>\r\n        <td>${student.course}</td>\r\n        <td>${student.skills.join(\", \")}</td>\r\n        <td>${student.email}</td>\r\n        <td>${student.isEnrolled ? \"Так\" : \"Ні\"}</td>\r\n        <td>\r\n          <button class=\"edit-btn\" data-id=\"${student.id}\">Редагувати</button>\r\n          <button class=\"delete-btn\" data-id=\"${student.id}\">Видалити</button>\r\n        </td>\r\n      </tr>\r\n    `;\r\n    }).join(\"\");\r\n};\r\ngetStudentsButton.addEventListener(\"click\", getStudents);\r\n\r\n\r\n\r\n// Функція для додавання нового студента\r\n\r\nasync function addStudent(studentData) { \r\n    // твій код\r\n  try {\r\n     const option = { \r\n    method: \"POST\",\r\n    body: JSON.stringify(studentData),\r\n    headers: {\r\n      \"Content-Type\": \"application/json; charset=UTF-8\",\r\n    },\r\n  };\r\n\r\n   const fetching = await fetch(\"http://localhost:3000/students\", option); \r\n   return fetching\r\n}  catch (error) {\r\n    console.log(\"Помилка при додаванні студента\", error);\r\n  }\r\n  \r\n} \r\n\r\nstudentForm.addEventListener(\"submit\", (event) => {\r\n    event.preventDefault();\r\n\r\n    const studentData = {\r\n        name: form.name.value.trim(),\r\n        age: Number(form.age.value),\r\n        course: form.course.value.trim(),\r\n        skill: form.skill.value.trim(),\r\n        email: form.email.value.trim(),\r\n        isEnrolled: form.isEnrolled.checked,\r\n    };\r\n\r\n    addStudent(studentData)\r\n        .then(() => {\r\n            studentForm.reset();\r\n            getStudents();\r\n        })\r\n        .catch(() => { });\r\n});\r\n// Функція для оновлення студента\r\nlet editingId = null;\r\n\r\nasync function updateStudent(id) {\r\n    // твій код\r\n    try{\r\n    const response = await fetch(`http://localhost:3000/students/${id}`);\r\n       const { name, age, course, skills, email, isEnrolled } = await response.json();\r\n            studentForm.name.value = name;\r\n            studentForm.age.value = age;\r\n            studentForm.course.value = course;\r\n            studentForm.skills.value = skills.join(\", \");\r\n            studentForm.email.value = email;\r\n            studentForm.isEnrolled.checked = isEnrolled;\r\n            editingId = id;\r\n        } catch (error) {\r\n            console.log(\"помилка при отриманні даних студента\", error)\r\n        }\r\n}\r\n\r\n\r\nasync function updateStudentData(id, studentData) {\r\n    // твій код\r\n    try {\r\n        return await fetch(`http://localhost:3000/students/${id}`, {\r\n            method: \"PATCH\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify(studentData),\r\n        });\r\n    } catch (error) {\r\n    console.log(\"Помилка при оновленні студентів\", error);\r\n  }\r\n}\r\n\r\nstudentForm.addEventListener(\"submit\", (event) => {\r\n    event.preventDefault();\r\n\r\n    const studentData = {\r\n        name: studentForm.name.value.trim(),\r\n        age: Number(studentForm.age.value),\r\n        course: studentForm.course.value.trim(),\r\n        skills: studentForm.skills.value.replace(/\\s*,\\s*/g, \",\").split(\",\"),\r\n        email: studentForm.email.value.trim(),\r\n        isEnrolled: studentForm.isEnrolled.checked,\r\n    };\r\n\r\n    if (editingId) {\r\n        updateStudentData(editingId, studentData)\r\n            .then(() => {\r\n                studentForm.reset();\r\n                getStudents();\r\n            })\r\n            .catch(() => { });\r\n    } else {\r\n        addStudent(studentData)\r\n            .then(() => {\r\n                studentForm.reset();\r\n                getStudents();\r\n            })\r\n            .catch(() => { });\r\n    }\r\n});\r\n\r\nstudentsTableBody.addEventListener(\"click\", (event) => {\r\n    if (event.target.classList.contains(\"edit-btn\")) {\r\n        const id = event.target.dataset.id;\r\n        updateStudent(id);\r\n    }\r\n});\r\n\r\n// Функція для видалення студента\r\n\r\nasync function deleteStudent(id) {\r\n    // твій код\r\n    try{\r\n    const fetching = await fetch(`http://localhost:3000/students/${id}`, {\r\n        method: \"DELETE\",\r\n    });\r\n    return fetching\r\n} catch (error) {\r\n    console.log(\"Помилка при видаленні студента\", error);\r\n};\r\n};\r\n\r\n\r\nstudentsTableBody.addEventListener(\"click\", (event) => {\r\n    if (event.target.classList.contains(\"delete-btn\")) {\r\n        const id = event.target.dataset.id;\r\n        deleteStudent(id).then(() => getStudents()).catch(() => { });;\r\n    }\r\n});\r\n"],"names":[],"version":3,"file":"hm_19.579125c3.js.map","sourceRoot":"/__parcel_source_root/"}