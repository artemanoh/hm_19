{"mappings":"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","sources":["<anon>","src/index.js"],"sourcesContent":["// Функція для отримання всіх студентів\nconst studentsTableBody = document.querySelector(\"#students-table tbody\");\nconst getStudentsButton = document.getElementById(\"get-students-btn\");\nconst studentForm = document.getElementById(\"add-student-form\");\nasync function getStudents() {\n    // твій код\n    try {\n        const gettingFetch = await fetch(\"http://localhost:3000/students\");\n        const students = await gettingFetch.json();\n        renderStudents(students);\n    } catch (error) {\n        console.log(\"\\u041F\\u043E\\u043C\\u0438\\u043B\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u0437\\u0430\\u0432\\u0430\\u043D\\u0442\\u0430\\u0436\\u0435\\u043D\\u043D\\u0456 \\u0441\\u0442\\u0443\\u0434\\u0435\\u043D\\u0442\\u0456\\u0432\", error);\n    }\n}\n// Функція для відображення студентів у таблиці\nfunction renderStudents(students) {\n    // твій код\n    studentsTableBody.innerHTML = makeStudentsMarkup(students);\n}\nconst makeStudentsMarkup = (students)=>{\n    return students.map((student)=>{\n        return `\n      <tr>\n        <td>${student.id}</td>\n        <td>${student.name}</td>\n        <td>${student.age}</td>\n        <td>${student.course}</td>\n        <td>${student.skills.join(\", \")}</td>\n        <td>${student.email}</td>\n        <td>${student.isEnrolled ? \"\\u0422\\u0430\\u043A\" : \"\\u041D\\u0456\"}</td>\n        <td>\n          <button class=\"edit-btn\" data-id=\"${student.id}\">\\u{420}\\u{435}\\u{434}\\u{430}\\u{433}\\u{443}\\u{432}\\u{430}\\u{442}\\u{438}</button>\n          <button class=\"delete-btn\" data-id=\"${student.id}\">\\u{412}\\u{438}\\u{434}\\u{430}\\u{43B}\\u{438}\\u{442}\\u{438}</button>\n        </td>\n      </tr>\n    `;\n    }).join(\"\");\n};\ngetStudentsButton.addEventListener(\"click\", getStudents);\n// Функція для додавання нового студента\nasync function addStudent(studentData) {\n    // твій код\n    try {\n        const option = {\n            method: \"POST\",\n            body: JSON.stringify(studentData),\n            headers: {\n                \"Content-Type\": \"application/json; charset=UTF-8\"\n            }\n        };\n        const fetching = await fetch(\"http://localhost:3000/students\", option);\n        return fetching;\n    } catch (error) {\n        console.log(\"\\u041F\\u043E\\u043C\\u0438\\u043B\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u0434\\u043E\\u0434\\u0430\\u0432\\u0430\\u043D\\u043D\\u0456 \\u0441\\u0442\\u0443\\u0434\\u0435\\u043D\\u0442\\u0430\", error);\n    }\n}\nstudentForm.addEventListener(\"submit\", (event)=>{\n    event.preventDefault();\n    const studentData = {\n        name: form.name.value.trim(),\n        age: Number(form.age.value),\n        course: form.course.value.trim(),\n        skill: form.skill.value.trim(),\n        email: form.email.value.trim(),\n        isEnrolled: form.isEnrolled.checked\n    };\n    addStudent(studentData).then(()=>{\n        studentForm.reset();\n        getStudents();\n    }).catch(()=>{});\n});\n// Функція для оновлення студента\nlet editingId = null;\nasync function updateStudent(id) {\n    // твій код\n    try {\n        const response = await fetch(`http://localhost:3000/students/${id}`);\n        const { name, age, course, skills, email, isEnrolled } = await response.json();\n        studentForm.name.value = name;\n        studentForm.age.value = age;\n        studentForm.course.value = course;\n        studentForm.skills.value = skills.join(\", \");\n        studentForm.email.value = email;\n        studentForm.isEnrolled.checked = isEnrolled;\n        editingId = id;\n    } catch (error) {\n        console.log(\"\\u043F\\u043E\\u043C\\u0438\\u043B\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u043E\\u0442\\u0440\\u0438\\u043C\\u0430\\u043D\\u043D\\u0456 \\u0434\\u0430\\u043D\\u0438\\u0445 \\u0441\\u0442\\u0443\\u0434\\u0435\\u043D\\u0442\\u0430\", error);\n    }\n}\nasync function updateStudentData(id, studentData) {\n    // твій код\n    try {\n        return await fetch(`http://localhost:3000/students/${id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(studentData)\n        });\n    } catch (error) {\n        console.log(\"\\u041F\\u043E\\u043C\\u0438\\u043B\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u043E\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u043D\\u0456 \\u0441\\u0442\\u0443\\u0434\\u0435\\u043D\\u0442\\u0456\\u0432\", error);\n    }\n}\nstudentForm.addEventListener(\"submit\", (event)=>{\n    event.preventDefault();\n    const studentData = {\n        name: studentForm.name.value.trim(),\n        age: Number(studentForm.age.value),\n        course: studentForm.course.value.trim(),\n        skills: studentForm.skills.value.replace(/\\s*,\\s*/g, \",\").split(\",\"),\n        email: studentForm.email.value.trim(),\n        isEnrolled: studentForm.isEnrolled.checked\n    };\n    if (editingId) updateStudentData(editingId, studentData).then(()=>{\n        studentForm.reset();\n        getStudents();\n    }).catch(()=>{});\n    else addStudent(studentData).then(()=>{\n        studentForm.reset();\n        getStudents();\n    }).catch(()=>{});\n});\nstudentsTableBody.addEventListener(\"click\", (event)=>{\n    if (event.target.classList.contains(\"edit-btn\")) {\n        const id = event.target.dataset.id;\n        updateStudent(id);\n    }\n});\n// Функція для видалення студента\nasync function deleteStudent(id) {\n    // твій код\n    try {\n        const fetching = await fetch(`http://localhost:3000/students/${id}`, {\n            method: \"DELETE\"\n        });\n        return fetching;\n    } catch (error) {\n        console.log(\"\\u041F\\u043E\\u043C\\u0438\\u043B\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u0432\\u0438\\u0434\\u0430\\u043B\\u0435\\u043D\\u043D\\u0456 \\u0441\\u0442\\u0443\\u0434\\u0435\\u043D\\u0442\\u0430\", error);\n    }\n}\nstudentsTableBody.addEventListener(\"click\", (event)=>{\n    if (event.target.classList.contains(\"delete-btn\")) {\n        const id = event.target.dataset.id;\n        deleteStudent(id).then(()=>getStudents()).catch(()=>{});\n    }\n});\n\n//# sourceMappingURL=hm_19.28d37a55.js.map\n","// Функція для отримання всіх студентів\r\nconst studentsTableBody = document.querySelector(\"#students-table tbody\");\r\nconst getStudentsButton = document.getElementById(\"get-students-btn\");\r\nconst studentForm = document.getElementById(\"add-student-form\");\r\n\r\nasync function getStudents() {\r\n    // твій код\r\n  try {\r\n    const gettingFetch = await fetch(\"http://localhost:3000/students\");\r\n    const students = await gettingFetch.json();\r\n    renderStudents(students);\r\n  } catch (error) {\r\n    console.log(\"Помилка при завантаженні студентів\", error);\r\n  }\r\n}\r\n\r\n\r\n// Функція для відображення студентів у таблиці\r\n\r\nfunction renderStudents(students) {\r\n    // твій код\r\n    studentsTableBody.innerHTML = makeStudentsMarkup(students);\r\n}\r\n\r\n\r\nconst makeStudentsMarkup = (students) => {\r\n    return students.map((student) => {\r\n        return `\r\n      <tr>\r\n        <td>${student.id}</td>\r\n        <td>${student.name}</td>\r\n        <td>${student.age}</td>\r\n        <td>${student.course}</td>\r\n        <td>${student.skills.join(\", \")}</td>\r\n        <td>${student.email}</td>\r\n        <td>${student.isEnrolled ? \"Так\" : \"Ні\"}</td>\r\n        <td>\r\n          <button class=\"edit-btn\" data-id=\"${student.id}\">Редагувати</button>\r\n          <button class=\"delete-btn\" data-id=\"${student.id}\">Видалити</button>\r\n        </td>\r\n      </tr>\r\n    `;\r\n    }).join(\"\");\r\n};\r\ngetStudentsButton.addEventListener(\"click\", getStudents);\r\n\r\n\r\n\r\n// Функція для додавання нового студента\r\n\r\nasync function addStudent(studentData) { \r\n    // твій код\r\n  try {\r\n     const option = { \r\n    method: \"POST\",\r\n    body: JSON.stringify(studentData),\r\n    headers: {\r\n      \"Content-Type\": \"application/json; charset=UTF-8\",\r\n    },\r\n  };\r\n\r\n   const fetching = await fetch(\"http://localhost:3000/students\", option); \r\n   return fetching\r\n}  catch (error) {\r\n    console.log(\"Помилка при додаванні студента\", error);\r\n  }\r\n  \r\n} \r\n\r\nstudentForm.addEventListener(\"submit\", (event) => {\r\n    event.preventDefault();\r\n\r\n    const studentData = {\r\n        name: form.name.value.trim(),\r\n        age: Number(form.age.value),\r\n        course: form.course.value.trim(),\r\n        skill: form.skill.value.trim(),\r\n        email: form.email.value.trim(),\r\n        isEnrolled: form.isEnrolled.checked,\r\n    };\r\n\r\n    addStudent(studentData)\r\n        .then(() => {\r\n            studentForm.reset();\r\n            getStudents();\r\n        })\r\n        .catch(() => { });\r\n});\r\n// Функція для оновлення студента\r\nlet editingId = null;\r\n\r\nasync function updateStudent(id) {\r\n    // твій код\r\n    try{\r\n    const response = await fetch(`http://localhost:3000/students/${id}`);\r\n       const { name, age, course, skills, email, isEnrolled } = await response.json();\r\n            studentForm.name.value = name;\r\n            studentForm.age.value = age;\r\n            studentForm.course.value = course;\r\n            studentForm.skills.value = skills.join(\", \");\r\n            studentForm.email.value = email;\r\n            studentForm.isEnrolled.checked = isEnrolled;\r\n            editingId = id;\r\n        } catch (error) {\r\n            console.log(\"помилка при отриманні даних студента\", error)\r\n        }\r\n}\r\n\r\n\r\nasync function updateStudentData(id, studentData) {\r\n    // твій код\r\n    try {\r\n        return await fetch(`http://localhost:3000/students/${id}`, {\r\n            method: \"PATCH\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify(studentData),\r\n        });\r\n    } catch (error) {\r\n    console.log(\"Помилка при оновленні студентів\", error);\r\n  }\r\n}\r\n\r\nstudentForm.addEventListener(\"submit\", (event) => {\r\n    event.preventDefault();\r\n\r\n    const studentData = {\r\n        name: studentForm.name.value.trim(),\r\n        age: Number(studentForm.age.value),\r\n        course: studentForm.course.value.trim(),\r\n        skills: studentForm.skills.value.replace(/\\s*,\\s*/g, \",\").split(\",\"),\r\n        email: studentForm.email.value.trim(),\r\n        isEnrolled: studentForm.isEnrolled.checked,\r\n    };\r\n\r\n    if (editingId) {\r\n        updateStudentData(editingId, studentData)\r\n            .then(() => {\r\n                studentForm.reset();\r\n                getStudents();\r\n            })\r\n            .catch(() => { });\r\n    } else {\r\n        addStudent(studentData)\r\n            .then(() => {\r\n                studentForm.reset();\r\n                getStudents();\r\n            })\r\n            .catch(() => { });\r\n    }\r\n});\r\n\r\nstudentsTableBody.addEventListener(\"click\", (event) => {\r\n    if (event.target.classList.contains(\"edit-btn\")) {\r\n        const id = event.target.dataset.id;\r\n        updateStudent(id);\r\n    }\r\n});\r\n\r\n// Функція для видалення студента\r\n\r\nasync function deleteStudent(id) {\r\n    // твій код\r\n    try{\r\n    const fetching = await fetch(`http://localhost:3000/students/${id}`, {\r\n        method: \"DELETE\",\r\n    });\r\n    return fetching\r\n} catch (error) {\r\n    console.log(\"Помилка при видаленні студента\", error);\r\n};\r\n};\r\n\r\n\r\nstudentsTableBody.addEventListener(\"click\", (event) => {\r\n    if (event.target.classList.contains(\"delete-btn\")) {\r\n        const id = event.target.dataset.id;\r\n        deleteStudent(id).then(() => getStudents()).catch(() => { });;\r\n    }\r\n});\r\n"],"names":["studentsTableBody","document","querySelector","getStudentsButton","getElementById","studentForm","getStudents","gettingFetch","fetch","students","json","renderStudents","error","console","log","innerHTML","makeStudentsMarkup","map","student","id","name","age","course","skills","join","email","isEnrolled","addStudent","studentData","option","method","body","JSON","stringify","headers","addEventListener","event","preventDefault","form","value","trim","Number","skill","checked","then","reset","catch","editingId","updateStudent","response","updateStudentData","deleteStudent","replace","split","target","classList","contains","dataset"],"version":3,"file":"hm_19.28d37a55.js.map"}